                                       Question Application:
Clone the below mentioned repository and deploy the application (Run application in port 3000).
Repo URL : https://github.com/Vennilavan12/Trend.git

Docker:
Dockerize the application by creating Dockerfile
Build an application and check output using docker image.

Terraform:
Define infrastructure in main.tf to create VPC, IAM, EC2 with Jenkins, etc.
Use terraform command to provision infrastructure.
DockerHub:
Create a DockerHub repository.
Kubernetes:
Setup Kubernetes in AWS EKS and Confirm EKS cluster is running.
Write deployment and service YAML files.
Deploy using kubectl via Jenkins.
Version Control:
Push the codebase to a Git provider (GitHub).
Add gitignore and dockerignore files and use CLI commands to push code.
Jenkins: 
Install Jenkins and necessary plugins (Docker, Git, Kubernetes, Pipeline) for build, push &deploy applications.
Setup Github and jenkins integration using github webhook build trigger for auto build for every commit.
Create a declarative pipeline script and pipeline project to build, push & deploy using CI-CD.
Monitoring:
Setup a monitoring system to check the health of the cluster or application (opensource) is highly appreciable. 
Submission Guidelines:
GitHub Link: Submit full code repository.
README File: Include setup instructions, pipeline explanation, and screenshots or create a document and attach all screenshots.
Application deployed kubernetes Loadbalancer ARN.

**************************************************************************************************************************
terraform file for ctreate the ec2 instance :
create folder terraform and create file main.tf
copy and paste follwing contnent

nano main.tf

provider "aws" {
  region = "us-east-1"
}

# ---------------------------------------
# Auto-generate SSH Key Pair for EC2
# ---------------------------------------
resource "tls_private_key" "auto_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "auto_keypair" {
  key_name   = "ubuntu-devops-key"
  public_key = tls_private_key.auto_key.public_key_openssh
}

output "private_key_pem" {
  value     = tls_private_key.auto_key.private_key_pem
  sensitive = true
}

# ---------------------------------------
# Security Group with all required ports
# ---------------------------------------
resource "aws_security_group" "devops_sg" {
  name        = "ubuntu-devops-sg"
  description = "Allow DevOps ports"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 9090
    to_port     = 9090
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 9100
    to_port     = 9100
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 9323
    to_port     = 9323
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ---------------------------------------
# Ubuntu EC2 Instance with Java 21, Jenkins, Docker
# ---------------------------------------
resource "aws_instance" "ubuntu_ec2" {
  ami                         = "ami-0fc5d935ebf8bc3bc" # Ubuntu 22.04 in us-east-1
  instance_type               = "t2.micro"
  key_name                    = aws_key_pair.auto_keypair.key_name
  vpc_security_group_ids      = [aws_security_group.devops_sg.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get install -y wget gnupg curl unzip

              # Install Java 21 (OpenJDK)
              add-apt-repository ppa:openjdk-r/ppa -y
              apt-get update
              apt-get install -y openjdk-21-jdk

              # Set JAVA_HOME
              echo 'export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))' >> /etc/profile
              echo 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile
              source /etc/profile

              # Install Docker
              apt-get install -y docker.io
              systemctl start docker
              systemctl enable docker
              usermod -aG docker ubuntu
              chmod 777 /var/run/docker.sock

              # Install Jenkins
              curl -fsSL https://pkg.jenkins.io/debian/jenkins.io.key | tee \
                /usr/share/keyrings/jenkins-keyring.asc > /dev/null
              echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
                https://pkg.jenkins.io/debian binary/ | tee \
                /etc/apt/sources.list.d/jenkins.list > /dev/null

              apt-get update
              apt-get install -y jenkins
              systemctl enable jenkins
              systemctl start jenkins
              EOF

  tags = {
    Name = "Ubuntu-DevOps-Server"
  }
}


run the file by using follwing command:
terraform init
terraform plan
terraform apply

after creation login into ec2 instance
to check all packages installed or not by using command:

sudo cat /var/log/cloud-init-output.log


after that configure the jenkins:
 1. run the jenkins by using http://yourec2ip:8080
 2.Retrieve initial admin password (only first time):
 sudo cat /var/lib/jenkins/secrets/initialAdminPassword
 3.Install suggested plugins when prompted (“Install suggested plugins”). If you skip, you can install later via Manage Jenkins → Manage Plugins.
 4.Required Plugins (ensure these are installed):
 
GitHub Plugin

Git Plugin

Pipeline (Workflow) Plugin

Docker Plugin

Kubernetes CLI Plugin (or just ensure kubectl is installed on agent)

Credentials Binding Plugin

Amazon EKS / AWS CLI support (can be handled via shell steps)

5. Credentials Setup in Jenkins:

Go to Credentials → System → Global credentials (unrestricted) → Add Credentials.

Add the following:

DockerHub credentials

Kind: Username with password

ID: e.g., dockerhub-creds

Username: your DockerHub username

Password: DockerHub password or access token

GitHub access token (if the repo is private or to avoid rate limits)

Kind: Secret text (or username/password if using username + PAT)

ID: e.g., github-token

Token: Generated from GitHub (with repo, admin:repo_hook scopes if needing webhook setup)

AWS credentials (if you're using aws CLI in the pipeline to talk to EKS)

Kind: AWS Credentials (if using AWS Credentials Plugin) or “Username with password”/secret text to set AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY

ID: e.g., aws-creds

Kubeconfig (optional alternative)

Store kubeconfig content as a secret file and write it to disk in the pipeline step before running kubectl.


Run the Docker container:
create and save the docker file in source code folder:

nano Dockerfile

#copy the content:

# Use Nginx base image
FROM nginx:alpine

# Remove default Nginx static files
RUN rm -rf /usr/share/nginx/html/*

# Copy all current static files into Nginx html directory
COPY . /usr/share/nginx/html

# Set permissions (optional but helpful)
RUN chmod -R 755 /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Start Nginx in foreground
CMD ["nginx", "-g", "daemon off;"]

Create Docker registory:

docker login -u your docker id
enter your password

docker tag trendify-app yourdockerhubuser/trendify-app:latest

docker tag trendify-app aravinddev/trendify-app:latest

Push to Docker Hub:
docker push yourdockerhubuser/trendify-app:latest

Pull the Image:
docker pull yourdockerhubuser/trendify-app:latest

Run the Container:
docker run -d -p 3000:80 --name trendify-container yourdockerhubuser/trendify-app:latest

Verify Container is Running:
dokcer ps

Test in Browser:

AWS EC2: http://<your-ec2-public-ip>:3000
(Ensure port 3000 is open in the EC2 Security Group)

Stop & Remove Container (if needed):
docker stop trendify-container
docker rm trendify-container

















